import {
  moveTaskToInProgress,
  moveTaskToInReview,
  moveTaskToInDone,
} from "./taskMover.js";
import { sendTelegramMessage } from "./telegram.js";
import { extractIssueNumber } from "./utils.js";

export async function handleCreateEvent(payload) {
  const branchName = payload.ref;
  const issueNumber = extractIssueNumber(branchName);
  if (!issueNumber) {
    console.log(
      `‚ö†Ô∏è Branch name "${branchName}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —à–∞–±–ª–æ–Ω—É.`
    );
    return;
  }

  try {
    const result = await moveTaskToInProgress(issueNumber);
    const statusMessage = result.alreadyInProgress
      ? `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${issueNumber} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_PROGRESS.`
      : `‚úÖ –ó–∞–¥–∞—á–∞ ${issueNumber} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ IN_PROGRESS.`;
    await sendTelegramMessage(
      `üîî GitHub Webhook: create\n` +
        `üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${payload?.repository?.full_name || "unknown"}\n` +
        `üî¢ –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ${issueNumber}\n` +
        `üîó –°—Å—ã–ª–∫–∞: ${result.issueUrl || "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}\n` +
        statusMessage
    );
  } catch (err) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber} –≤ IN_PROGRESS:`,
      err
    );
    await sendTelegramMessage(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber}: ${err.message}`
    );
  }
}

export async function handlePullRequestEvent(payload) {
  const prBranchName = payload.pull_request.head.ref;
  const issueNumber = extractIssueNumber(prBranchName);
  if (!issueNumber) {
    console.log(
      `‚ö†Ô∏è PR branch name "${prBranchName}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —à–∞–±–ª–æ–Ω—É.`
    );
    return;
  }

  if (payload.action === "opened") {
    try {
      const result = await moveTaskToInReview(issueNumber);
      const statusMessage = result.alreadyInReview
        ? `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${issueNumber} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_REVIEW.`
        : `‚úÖ –ó–∞–¥–∞—á–∞ ${issueNumber} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ IN_REVIEW.`;
      await sendTelegramMessage(
        `üîî GitHub Webhook: pull_request (opened)\n` +
          `üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${payload.repository.full_name}\n` +
          `üî¢ –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ${issueNumber}\n` +
          `üîó PR: ${payload.pull_request.html_url}\n` +
          statusMessage
      );
    } catch (err) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber} –≤ IN_REVIEW:`,
        err
      );
      await sendTelegramMessage(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber}: ${err.message}`
      );
    }
  }

  if (payload.action === "closed") {
    try {
      const result = await moveTaskToInDone(issueNumber);
      const statusMessage = result.alreadyDone
        ? `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ ${issueNumber} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ DONE.`
        : `‚úÖ –ó–∞–¥–∞—á–∞ ${issueNumber} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ DONE.`;
      await sendTelegramMessage(
        `üîî GitHub Webhook: pull_request (closed)\n` +
          `üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${payload.repository.full_name}\n` +
          `üî¢ –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ${issueNumber}\n` +
          `üîó PR: ${payload.pull_request.html_url}\n` +
          statusMessage
      );
    } catch (err) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber} –≤ DONE:`,
        err
      );
      await sendTelegramMessage(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${issueNumber}: ${err.message}`
      );
    }
  }
}
