import fetch from "node-fetch";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
 *
 * @param {string} projectId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.
 * @param {string} columnFieldId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞.
 * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API GitHub.
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
 * @throws {Error} - –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
 */
async function fetchProjectItems(projectId, token) {
  const graphqlUrl = "https://api.github.com/graphql";
  const query = `
      query {
        node(id: "${projectId}") {
          ... on ProjectV2 {
            items(first: 100) {
              nodes {
                id
                content {
                  ... on Issue {
                    number
                    title
                    url
                  }
                }
                fieldValues(first: 10) {  
                  nodes {
                    __typename
                    ... on ProjectV2ItemFieldSingleSelectValue {
                      optionId
                    }
                  }
                }
              }
            }
          }
        }
      }
    `;

  let response;
  try {
    response = await fetch(graphqlUrl, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ query }),
    });
  } catch (networkError) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API:", networkError);
    throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API");
  }

  const responseText = await response.text();
  if (!response.ok) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: –°—Ç–∞—Ç—É—Å ${response.status}, –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${responseText}`
    );
    throw new Error(
      `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: GitHub API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: ${responseText}`
    );
  }

  let data;
  try {
    data = JSON.parse(responseText);
  } catch (jsonError) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:", responseText, jsonError);
    throw new Error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç GitHub API");
  }

  if (data.errors) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∏ GraphQL API:",
      JSON.stringify(data.errors, null, 2)
    );
    throw new Error(
      "–û—à–∏–±–∫–∞ GraphQL API: " + JSON.stringify(data.errors, null, 2)
    );
  }

  return data?.data?.node?.items?.nodes || [];
}

/**
 * –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É.
 *
 * @param {string|number} issueNumber - –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.
 * @param {string} projectId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.
 * @param {string} columnFieldId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞.
 * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API GitHub.
 * @returns {Promise<Object|null>} - –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
 */
async function getIssueItemByNumber(
  issueNumber,
  projectId,
  columnFieldId,
  token
) {
  const items = await fetchProjectItems(projectId, columnFieldId, token);
  return (
    items.find((item) => item?.content?.number === Number(issueNumber)) || null
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
 *
 * @param {string} issueId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏.
 * @param {string} projectId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.
 * @param {string} columnFieldId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞.
 * @param {string} inProgressOptionId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ü–∏–∏ "IN_PROGRESS".
 * @param {string} token - –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API GitHub.
 * @returns {Promise<boolean>} - –ò—Å—Ç–∏–Ω–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.
 * @throws {Error} - –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
 */
async function updateIssueStatus(
  issueId,
  projectId,
  columnFieldId,
  inProgressOptionId,
  token
) {
  const graphqlUrl = "https://api.github.com/graphql";
  const mutation = `
    mutation {
      updateProjectV2ItemFieldValue(input: {
        projectId: "${projectId}",
        itemId: "${issueId}",
        fieldId: "${columnFieldId}",
        value: { singleSelectOptionId: "${inProgressOptionId}" }
      }) { clientMutationId }
    }
  `;

  const response = await fetch(graphqlUrl, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ query: mutation }),
  });

  if (!response.ok) {
    throw new Error(`GitHub API responded with status: ${response.status}`);
  }

  const data = await response.json();
  if (data.errors) {
    throw new Error(
      "Error updating issue status: " + JSON.stringify(data.errors)
    );
  }

  return true;
}

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ TODO –≤ IN_PROGRESS.
 * –ü–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ IN_PROGRESS.
 *
 * @param {string|number} issueNumber - –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ –∏–º–µ–Ω–∏ –≤–µ—Ç–∫–∏.
 * @returns {Promise<{ issueUrl: string, alreadyInProgress: boolean }>} - –û–±—ä–µ–∫—Ç —Å URL –∑–∞–¥–∞—á–∏ –∏ —Ñ–ª–∞–≥–æ–º, —É–∫–∞–∑—ã–≤–∞—é—â–∏–º, –±—ã–ª–∞ –ª–∏ –æ–Ω–∞ —É–∂–µ –≤ IN_PROGRESS.
 * @throws {Error} - –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É.
 */
async function moveTaskToInProgress(issueNumber) {
  const token = process.env.TOKEN_AUTOMATIZATION;
  const projectId = process.env.ID_PROJECT_SKILLDOR;
  const columnFieldId = process.env.ID_COLUMN_STATUS_SKILLDOR;
  const inProgressOptionId = process.env.ID_COLUMN_STATUS_IN_PROGRESS_SKILLDOR;

  if (!token || !projectId || !columnFieldId || !inProgressOptionId) {
    throw new Error(
      "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏."
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
  const issueItem = await getIssueItemByNumber(
    issueNumber,
    projectId,
    columnFieldId,
    token
  );

  if (!issueItem) {
    throw new Error(`‚ùå –ó–∞–¥–∞—á–∞ #${issueNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ.`);
  }

  const issueUrl = issueItem?.content?.url || "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ IN_PROGRESS
  if (issueItem?.fieldValueByFieldId?.optionId === inProgressOptionId) {
    const message = `‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #${issueNumber} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ IN_PROGRESS.\nüîó –°—Å—ã–ª–∫–∞: ${issueUrl}`;
    console.log(message);
    await sendTelegramMessage(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    return { issueUrl, alreadyInProgress: true };
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ IN_PROGRESS
  await updateIssueStatus(
    issueItem.id,
    projectId,
    columnFieldId,
    inProgressOptionId,
    token
  );

  const successMessage = `‚úÖ –ó–∞–¥–∞—á–∞ #${issueNumber} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ IN_PROGRESS.\nüîó –°—Å—ã–ª–∫–∞: ${issueUrl}`;
  console.log(successMessage);
  await sendTelegramMessage(successMessage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram

  return { issueUrl, alreadyInProgress: false };
}

export { moveTaskToInProgress };
