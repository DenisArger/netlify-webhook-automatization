import fetch from "node-fetch";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
 */
async function fetchProjectItems(projectId, token) {
  const graphqlUrl = "https://api.github.com/graphql";
  const query = `
      query { 
        node(id: "${projectId}") {
          ... on ProjectV2 {
            items(first: 100) {
              nodes {
                id
                content {
                  ... on Issue {
                    number
                    title
                    url
                  }
                }
              }
            }
          }
        }
      }
    `;

  try {
    const response = await fetch(graphqlUrl, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ query }),
    });

    const responseText = await response.text();
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`, responseText);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);
    }
    const data = JSON.parse(responseText);

    if (data.errors) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∏ GraphQL API:",
        JSON.stringify(data.errors, null, 2)
      );
      throw new Error("–û—à–∏–±–∫–∞ GraphQL API");
    }

    return data?.data?.node?.items?.nodes || [];
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub API:", error);
    throw error;
  }
}

/**
 * –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É.
 */
async function getIssueItemByNumber(issueNumber, projectId, token) {
  const items = await fetchProjectItems(projectId, token);
  return (
    items.find((item) => item?.content?.number === Number(issueNumber)) || null
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
 */
async function updateIssueStatus(
  issueId,
  projectId,
  columnFieldId,
  inProgressOptionId,
  token
) {
  const graphqlUrl = "https://api.github.com/graphql";
  const mutation = `
    mutation {
      updateProjectV2ItemFieldValue(input: {
        projectId: "${projectId}",
        itemId: "${issueId}",
        fieldId: "${columnFieldId}",
        value: { singleSelectOptionId: "${inProgressOptionId}" }
      }) { clientMutationId }
    }
  `;

  try {
    const response = await fetch(graphqlUrl, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ query: mutation }),
    });

    const data = await response.json();
    if (data.errors) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
        JSON.stringify(data.errors, null, 2)
      );
      return false;
    }

    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:", error);
    return false;
  }
}

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ IN_PROGRESS.
 */
async function moveTaskToInProgress(issueNumber) {
  const token = process.env.TOKEN_AUTOMATIZATION;
  const projectId = process.env.ID_PROJECT_SKILLDOR;
  const columnFieldId = process.env.ID_COLUMN_STATUS_SKILLDOR;
  const inProgressOptionId = process.env.ID_COLUMN_STATUS_IN_PROGRESS_SKILLDOR;

  if (!token || !projectId || !columnFieldId || !inProgressOptionId) {
    throw new Error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  }

  const issueItem = await getIssueItemByNumber(issueNumber, projectId, token);
  if (!issueItem) {
    throw new Error(`‚ùå –ó–∞–¥–∞—á–∞ #${issueNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
  }

  const issueUrl = issueItem?.content?.url || "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏";

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  const success = await updateIssueStatus(
    issueItem.id,
    projectId,
    columnFieldId,
    inProgressOptionId,
    token
  );
  if (!success) {
    throw new Error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #${issueNumber}.`);
  }

  console.log(
    `‚úÖ –ó–∞–¥–∞—á–∞ #${issueNumber} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ IN_PROGRESS.\nüîó ${issueUrl}`
  );
  return { issueUrl, alreadyInProgress: false };
}

export { moveTaskToInProgress };
